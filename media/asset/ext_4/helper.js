Ext.namespace('Ext.renderer');Ext.renderer.formatDate = function (value, meta, record, rowIndex, colIndex, stor){	var dt = '&nbsp;';	if(!Ext.isEmpty(value)){		v = new Date(value);		if(Ext.isDate(v))dt = Ext.Date.format(v,'d/m/Y');	}	return '<div style="background-color:#88D9FF;margin:-5px; padding:5px;">'+dt+'</div>';}Ext.renderer.masaKerja = function (value, meta, record, rowIndex, colIndex, store) {	var stringTahun = '';	var stringBulan = '';	if(record.data.Th != '' && record.data.Th != null){		var stringTahun = record.data.Th+' thn ';	}	if(record.data.Bl != '' && record.data.Bl != null){		var stringBulan = record.data.Bl+' bln ';	}	return stringTahun+stringBulan;}Ext.renderer.formatNominal = function (value, meta, record, rowIndex, colIndex, store){	if(value != '' && value != null){		var gaji = new String(value);		var result = '';		len = gaji.length;                   for(var i=len-1;i>=0;i--)        {                       if ((i+1)%3 == 0 && i+1!= len) result += ".";            result += gaji.charAt(len-1-i);        }		return result;	}else{		return value;	}}Ext.renderer.formatAngka = function (value, meta, record, rowIndex, colIndex, store){	if(value != '' && value != null){		var angka = new String(value);		var result = '';		len = angka.length;                   for(var i=0;i < len;i++)        {                       if (angka.charAt(i-3)=='.') break;            result += angka.charAt(i);        }		return result;	}else{		return value;	}}Ext.renderer.eselon = function (value, meta, record, rowIndex, colIndex, store){	if (value == 11) 		return 'I.a';	else if (value == 12) 		return 'I.b';	else if (value == 21) 		return 'II.a';	else if (value == 22) 		return 'II.b';	else if (value == 31)			return 'III.a';		else if (value == 32)			return 'III.b';		else if (value == 41)			return 'IV.a';		else if (value == 42)			return 'IV.b';		else if (value == 51) 		return 'V.a';			}Ext.renderer.tingkatpendidikan = function (value, meta, record, rowIndex, colIndex, store){	if (value == '01') 		return 'SD';	else if (value == '02') 		return 'SLTP';	else if (value == '03') 		return 'SLTA';	else if (value == '04') 		return 'D.I';	else if (value == '05')			return 'D.II';		else if (value == '06')			return 'D.III';		else if (value == '07')			return 'D.IV';		else if (value == '08')			return 'S1';		else if (value == '09') 		return 'S2';	else if (value == '10') 		return 'S3';	else if (value == '11') 		return 'NONE';		}Ext.renderer.itemjabatan = function (value, meta, record, rowIndex, colIndex, store){	if (value == "1") 		return 'Pengelompokan';	else if (value == "2") 		return 'Item Jabatan';			}function ucwords(str) {  return (str + '').replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g, function ($1) {    return $1.toUpperCase();  });}/** * this function is created for get value in object property by property string */ Object.byString = function(o, s) {    s = s.replace(/\[(\w+)\]/g, '.$1');  // convert indexes to properties    s = s.replace(/^\./, ''); // strip leading dot    var a = s.split('.');    while (a.length) {        var n = a.shift();        if (n in o) {            o = o[n];        } else {            return;        }    }    return o;}function objectParametize(obj, delimeter, q) {    var str = new Array();    if (!delimeter) delimeter = '&';    for (var key in obj) {        switch (typeof obj[key]) {            case 'string':            case 'number':                str[str.length] = key + '=' + Base64.encode(obj[key]);            break;            case 'object':                str[str.length] = objectParametize(obj[key], delimeter);        }    }    return (q === true ? '?' : '') + str.join(delimeter);}var Base64 = { 	// private property	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", 	// public method for encoding	encode : function (input) {		var output = "";		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;		var i = 0; 		input = input || '';				input = Base64._utf8_encode(input); 		while (i < input.length) { 			chr1 = input.charCodeAt(i++);			chr2 = input.charCodeAt(i++);			chr3 = input.charCodeAt(i++); 			enc1 = chr1 >> 2;			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);			enc4 = chr3 & 63; 			if (isNaN(chr2)) {				enc3 = enc4 = 64;			} else if (isNaN(chr3)) {				enc4 = 64;			} 			output = output +			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4); 		} 		return output;	}, 	// public method for decoding	decode : function (input) {		var output = "";		var chr1, chr2, chr3;		var enc1, enc2, enc3, enc4;		var i = 0; 		input = input || '';				input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ""); 		while (i < input.length) { 			enc1 = this._keyStr.indexOf(input.charAt(i++));			enc2 = this._keyStr.indexOf(input.charAt(i++));			enc3 = this._keyStr.indexOf(input.charAt(i++));			enc4 = this._keyStr.indexOf(input.charAt(i++)); 			chr1 = (enc1 << 2) | (enc2 >> 4);			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);			chr3 = ((enc3 & 3) << 6) | enc4; 			output = output + String.fromCharCode(chr1); 			if (enc3 != 64) {				output = output + String.fromCharCode(chr2);			}			if (enc4 != 64) {				output = output + String.fromCharCode(chr3);			} 		} 		output = Base64._utf8_decode(output); 		return output; 	}, 	// private method for UTF-8 encoding	_utf8_encode : function (string) {		string = String(string);		string = string.replace(/\r\n/g,"\n");		var utftext = ""; 		for (var n = 0; n < string.length; n++) { 			var c = string.charCodeAt(n); 			if (c < 128) {				utftext += String.fromCharCode(c);			}			else if((c > 127) && (c < 2048)) {				utftext += String.fromCharCode((c >> 6) | 192);				utftext += String.fromCharCode((c & 63) | 128);			}			else {				utftext += String.fromCharCode((c >> 12) | 224);				utftext += String.fromCharCode(((c >> 6) & 63) | 128);				utftext += String.fromCharCode((c & 63) | 128);			} 		} 		return utftext;	}, 	// private method for UTF-8 decoding	_utf8_decode : function (utftext) {		var string = "";		var i = 0;		var c = c1 = c2 = 0; 		while ( i < utftext.length ) { 			c = utftext.charCodeAt(i); 			if (c < 128) {				string += String.fromCharCode(c);				i++;			}			else if((c > 191) && (c < 224)) {				c2 = utftext.charCodeAt(i+1);				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));				i += 2;			}			else {				c2 = utftext.charCodeAt(i+1);				c3 = utftext.charCodeAt(i+2);				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));				i += 3;			} 		} 		return string;	}}function isValidDate(value){	if(value == '' || value == null){		return false;	} 		if(toString.call(value) === '[object Date]'){		return true;	}	if(typeof value.replace === 'function'){		return false;  	}}